{
    "swagger": "2.0",
    "info": {
        "version": "v0.1",
        "title": "Slamby API",
        "description": "\n\nSlamby introduces Slamby Service (API). Build powerful data management center, store and analyze your data easily. This documentation shows you a quick overview about the available API endpoints, technical details and business usage.\n\nWith Slamby you can:\n* Store and manage your data easily\n* Get high data security and privacy\n* Use improved data analysis\n\nOnce you've\n[registered your client](http://slamby.com/register/) it's easy\nto start working with Slamby API.\n\nAll endpoints are only accessible via https and are located at\n`api.slamby.com`.\n```\n  https://api.slamby.com/CLIENT_ID\n```\n\n> **Tip:** The `CLIENT_ID` is your unique identifier what you get after your server is ready to use.\n\n\n### Authentication\nThe base of the authentication is the `API_KEY`.\nYou have to provide it in the authorization header. It is **required for every API call**.\nThe examples of the documentation is preasuming that you provide the API key in the header.\n\n>*Example*\n>\n  Header   |Value\n  ---------|---\n  Authorization|Slamby `API_KEY`\n\n&nbsp;\n\n>**Tip:** You will get your `API_KEY` after your server is ready to use.\n\n\n## Dataset\nSlamby provides **Dataset** as a data storage. A dataset is a JSON document storage that allows to store schema free JSON objects, indexes and additional parameters. Inside you server you can create and manage multiple datasets.\n\nWith dataset you can:\n* Create multiple datasets\n* Using schema free JSON objects\n* Set indexes for text processing\n* Running text analysis on the stored data\n\n> **Tip:** With schema free JSON storage you can easily store your existing schemas. Store document related data - such as image urls, prices - and build powerful queries.\n\n### Create new Dataset\nCreate a new dataset by providing a sample JSON document and additional parameters.\n\n\n\n*Example REQUEST*\n\n> [POST /api/DataSets](#operation--api-DataSets-post))\n```JSON\n{\n    \"IdField\": \"id\",\n    \"InterpretedFields\": [\"title\", \"desc\"],\n    \"Name\": \"test1\",\n    \"NGramCount\": \"3\",\n    \"TagField\": \"tag\",\n    \"SampleDocument\": {\n      \"id\": 9,\n      \"title\": \"Example Product Title\",\n      \"desc\": \"Example Product Description\",\n      \"tag\": [1,2,3]\n    }\n}\n```\n\n*Example RESPONSE*\n>HTTP/1.1 201 CREATED\n\n##### Check the DataSet schema definition [here](#/definitions/DataSet)\n\n### Get Dataset\nGet information about a given dataset. A dataset can be accessed by its name.\n\nReturns with:\n* Dataset basic information\n* Dataset settings\n* Schema sample document\n* Dataset statistics\n\n*Example REQUEST*\n> [GET /api/DataSets/`example`](#operation--api-DataSets-get)\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n```JSON\n{\n  \"Name\": \"example\",\n  \"NGramCount\": 3,\n  \"IdField\": \"id\",\n  \"TagField\": \"tag\",\n  \"InterpretedFields\": [\n    \"title\",\n    \"desc\"\n  ],\n  \"Statistics\": {\n    \"DocumentsCount\": 3\n  },\n  \"SampleDocument\": {\n    \"id\": 1,\n    \"title\": \"Example title\",\n    \"desc\": \"Example Description\"\n    \"tag\": [1,2,3]\n  }\n}\n```\n\n##### Check the DataSet schema definition [here](#/definitions/DataSet)\n\n### Get Dataset List\nGet a list of the available datasets.\n\nReturns with:\n* Dataset objects array\n\n*Example REQUEST*\n> [GET /api/DataSets](#operation--api-DataSets-get)\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n```JSON\n[\n  {\n    \"Name\": \"example\",\n    \"NGramCount\": 3,\n    \"IdField\": \"id\",\n    \"TagField\": \"tags\",\n    \"InterpretedFields\": [\n      \"title\",\n      \"desc\"\n    ],\n    \"Statistics\": {\n      \"DocumentsCount\": 3\n    },\n    \"SampleDocument\": {\n      \"id\": 1,\n      \"title\": \"Example title\",\n      \"desc\": \"Example Description\"\n      \"tags\": [1,2,3]\n    }\n  },\n  {\n    \"Name\": \"example2\",\n    \"NGramCount\": 3,\n    \"IdField\": \"id\",\n    \"TagField\": \"tags\",\n    \"InterpretedFields\": [\n      \"title\",\n      \"desc\"\n    ],\n    \"Statistics\": {\n      \"DocumentsCount\": 3\n    },\n    \"SampleDocument\": {\n      \"id\": 1,\n      \"title\": \"Example title\",\n      \"desc\": \"Example Description\"\n      \"tags\": [1,2,3]\n    }\n  }\n]\n```\n\n##### Check the DataSet schema definition [here](#/definitions/DataSet)\n\n### Remove Dataset\nRemoves a given dataset. All the stored data will be removed.\n\n*Example REQUEST*\n> [DELETE /api/DataSets/`example`](#operation--api-DataSets-delete)\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n\n## Document\nManage your **documents** easily. Create, edit, remove and running text analysis.\n\nEvery document is related to a dataset. You have to specify which dataset you want to use in the `X-DataSet` header by the name of the dataset.\n\n> **Tip:** If you use any of the Document methods without or an unexisting `X-DataSet` header you will get a `Missing X-DataSet header!` error.\n\nWith document you can:\n* Insert multiple documents\n* Using your own schema\n* Accessing your documents easily\n* Modifying your documents easily\n* Running text analysis\n\n> **Tip:** Store all the related information - such as text, prices, image urls - and use powerful queries.\n\n### Insert New Document\nInsert a new document to a dataset using the predefined schema.\n\n*Example REQUEST*\n> [POST /api/Documents](#operation--api-Documents-post)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n>\n```JSON\n{\n  \"id\": 9,\n  \"title\": \"Example Product Title\",\n  \"desc\": \"Example Product Description\",\n  \"tags\": [1,2,3]\n}\n```\n\n*Example RESPONSE*\n> HTTP/1.1 201 CREATED\n\n### Get Document\nGet a document from a dataset.\n\n*Example REQUEST*\n> [GET /api/Documents/`9`](#operation--api-Documents-get)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n```JSON\n{\n  \"id\": 9,\n  \"title\": \"Example Product Title\",\n  \"desc\": \"Example Product Description\",\n  \"tags\": [1,2,3]\n}\n```\n\n### Edit Document\nEdit an existing document in a dataset.\n\n*Example REQUEST*\n> [PUT /api/Documents/`9`](#operation--api-Documents-put)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n```JSON\n{\n  \"id\": 9,\n  \"title\": \"Example Modified Product Title\",\n  \"desc\": \"Example Modified Product Description\",\n  \"tags\": [1,2,3,4,5,6,7,8,9]\n}\n```\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n\n\n### Copy To\nCopying documents from a dataset to another one. You can specify the documents by id. You can copy documents to an existing dataset.\nThe selected documents will **remain in the source dataset** as well.\n\n*Example REQUEST*\n> [POST /api/Documents/Copy](#operation--api-Documents-Copy-post)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n```JSON\n{\n  \"DestinationDataSetName\": \"TARGET_DATASET_NAME\",\n  \"Ids\": [\"10\", \"11\"]\n}\n```\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n\n> **Tip:** You can use the [POST /api/Documents/Sample](#operation--api-Documents-Sample-post) or the [POST /api/Documents/Filter](#operation--api-Documents-Filter-post) methods to get document ids easily.\n\n### Move To\n\nMoving documents from a dataset to another one. You can specify documents by id. You can move documents to an existing dataset. \nThe selected documents will be **removed from the source dataset**.\n\n*Example REQUEST*\n> [POST /api/Documents/Move](#operation--api-Documents-Move-post)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n```JSON\n{\n  \"DestinationDataSetName\": \"TARGET_DATASET_NAME\",\n  \"Ids\": [\"10\", \"11\"]\n}\n```\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n\n> **Tip:** You can use the [POST /api/Documents/Sample](#operation--api-Documents-Sample-post) or the [POST /api/Documents/Filter](#operation--api-Documents-Filter-post) methods to get document ids easily.\n\n\n\n## Tags\nManage tags to organize your data. Using tags create a tag cloud or a hiearchical tag tree.\n\nEvery tag is related to a Dataset. You have to specify which dataset you want to use in the `X-DataSet` header by the name of the dataset.\n\n> **Tip:** If you use any of the tag methods without or an unexisting `X-DataSet` header you will get a `Missing X-DataSet header!` error.\n\nWith Tags you can:\n* Create new tag\n* Update a tag\n* Get a single tag or a full tag list\n* Organize your tags into hierarchy\n* Use tags for categorization\n* Use tags for tagging.\n\n### Create New Tag\nCreate a new tag in a dataset.\n\n>**Tip:** To create hierarchy you have to specify the ParentId of the tag. The ParentId is the Id of the parent of the tag. In the dataset there must be an existing tag with the id given in the ParentId. If the tag is a root element, or you don't want to use hirerchy then just skip the property or set to `null`.\n\n*Example REQUEST*\n> [POST /api/Tags](#operation--api-Tags-post)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n```JSON\n{\n  \"Id\": \"1\",\n  \"Name\": \"example tag 1\",\n  \"ParentId\": null\n}\n```\n\n*Example RESPONSE*\n> HTTP/1.1 201 CREATED\n\n\n### Get Tag\nGet a tag by its Id.\n\n*Example REQUEST*\n> [GET /api/Tags/`1`](#operation--api-Tags-get)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n  \n*Example RESPONSE*\n> HTTP/1.1 200 OK\n```JSON\n{\n  \"Id\": \"1\",\n  \"Name\": \"example tag 1\",\n  \"ParentId\": null\n}\n```\n\n### Get Tag List\nGet all tags list from a given dataset.\n\n*Example REQUEST*\n> [GET /api/Tags](#operation--api-Tags-get)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n```JSON\n[\n  {\n    \"Id\": \"1\",\n    \"Name\": \"example tag 1\",\n    \"ParentId\": null\n  },\n  {\n    \"Id\": \"2\",\n    \"Name\": \"example tag 2\",\n    \"ParentId\": null\n  }\n]\n```\n\n### Remove Tag\nRemove a tag from tag list. Documents and datasets are not affected.\n\n*Example REQUEST*\n> [DELETE /api/Tags/`1`](#opreation--api-Tags-delete)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n\n## Sampling\nStatistical method to support sampling activity. Using sampling you can easily create **random samples** for experiments.\n\nWith sampling you can:\n- Create sample easily\n- Set the source categories\n- Use normal or stratified sampling method\n- Set sample size by fix number or percentage\n- Use built in pagination.\n\nFor sampling you have to specify which dataset you want to use in the `X-DataSet` header by the name of the dataset.\n\n*Example REQUEST*\n> [POST /api/Documents/Sample](#operation--api-Documents-Sample-post)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n```JSON\n{\n  \"Id\" : \"6902a2d3-0708-41f7-b21d-c5bd4b302bdc\",\n  \"IsStratified\" : \"false\",\n  \"Percent\" : \"0\",\n  \"Size\" : \"15000\",\n  \"TagIds\" : [],\n  \"Pagination\" : {\n      \"Offset\" : 0,\n      \"Limit\": 100,\n      \"OrderDirection\" : \"Asc\",\n      \"OrderByField\" : \"id\"\n  }\n}\n```\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n```JSON\n{\n  \"Items\": [\n    {\n      \"id\": \"1455197295447\",\n      \"title\": \"example title\",\n      \"desc\": \"example description\",\n      \"tags\": [\n        \"2\",\n        \"3\"\n      ]\n    },\n    {\n      \"id\": \"1455197591439\",\n      \"title\": \"example title\",\n      \"desc\": \"example description\",\n      \"tags\": [\n        \"3\"\n      ]\n    },\n    ...\n  ],\n  \"Pagination\": {\n    \"Offset\": 0,\n    \"Limit\": 100,\n    \"OrderDirection\": \"Asc\",\n    \"OrderByField\": \"desc\"\n  },\n  \"Count\": 100,\n  \"Total\": 15000\n}\n```\n\n##### For the parameters explanation check the DocumentSampleSettings schema definition [here](#/definitions/DocumentSampleSettings)\n##### For the pagination explanation check the pagination section [here](#pagination)\n\n## Filter\nPowerful **search engine**. Build **smart** search functions or filters. Easily access to your datasets with **simple queries**, **logical expressions** and **wild cards**. Manage your language dependencies using **optinal tokenizer**.\n\nWith Filter you can:\n* Create simple search queries\n* Filter by tags\n* Search in multiple fields\n* Access to all the available document fields and parameters\n* Use logical expressions\n* Use wild cards\n* Use optional tokenizers\n* Use built in pagination\n\n*Example REQUEST*\n> [POST /api/Documents/Filter](#operation--api-Documents-Filter-post)\n>\n  Header   |Value\n  ---------|---\n  X-DataSet|example\n```JSON\n{\n    \"QueryDictionary\" : {\n        \"title\" : \"michelin\"\n    },\n    \"TagIds\" : [\"1\"],\n    \"Pagination\" : {\n        \"Offset\" : 0,\n        \"Limit\": 100,\n        \"OrderDirection\" : \"Asc\",\n        \"OrderByField\" : \"title\"\n    }\n}\n```\n\n*Example RESPONSE*\n> HTTP/1.1 200 OK\n```JSON\n{\n  \"Items\": [\n    {\n      \"id\": \"1455197455453\",\n      \"title\": \"example title 1\",\n      \"desc\": \"example description\",\n      \"tags\": [\n        \"1\"\n      ]\n    },\n    {\n      \"id\": \"1455197455203\",\n      \"title\": \"example title 2\",\n      \"desc\": \"example description\",\n      \"tags\": [\n        \"1\"\n      ]\n    },\n    ...\n  ],\n  \"Pagination\": {\n    \"Offset\": 0,\n    \"Limit\": 100,\n    \"OrderDirection\": \"Asc\",\n    \"OrderByField\": \"title\"\n  },\n  \"Count\": 100,\n  \"Total\": 1543\n}\n```\n\n##### For the parameters explanation check the DocumentFilterSettings schema definition [here](#/definitions/DocumentFilterSettings)\n##### For the pagination explanation check the pagination section [here](#pagination)\n\n\n> **Tip:** Easily create a powerful search engine by using tokenizer and detailed search queries.\n\n\n## General\n\n\n### Pagination\nThere are situations when your query results lots of data. In these cases the pagination can be handy.\nYou have to only provide an offset and a limit in the pagination object.\nOptionally you can set a field which will be the base of the ordering and also the direction of the ordering (ascendig or descending).\n\nIn the result (PaginatedList[Object]) there is an Items property which containing the requested elements (or the part of the requested elements). Also it provides the count of the items (this is equal or lesser than the limit property) and the total count of the requested items. Also it returns the same pagination object which was int the request.\n\n>*Example REQUEST*\n```json\n{\n    ...\n    \"Pagination\" : {\n        \"Offset\" : 0,\n        \"Limit\": 10,\n        \"OrderDirection\" : \"Asc\",\n        \"OrderByField\" : \"title\"\n    }\n}\n```\n\n>*Example RESPONSE*\n```json\n{\n  \"Items\": [\n    {\n      ...\n    },\n    {\n      ...\n    },\n    ...\n  ],\n  \"Pagination\": {\n    \"Offset\": 0,\n    \"Limit\": 100,\n    \"OrderDirection\": \"Asc\",\n    \"OrderByField\": \"title\"\n  },\n  \"Count\": 10,\n  \"Total\": 21\n}\n```\n\n##### Check the Pagination schema definition [here](#/definitions/Pagination)\n##### Check the PaginatedList[Object] schema definition [here](#/definitions/PaginatedList[Object])\n"
    },
    "host": "api.slamby.com",
    "basePath": "/",
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "paths": {
        "/api/DataSets": {
            "get": {
                "description": "Get a list of the available datasets\n",
                "tags": [
                    "DataSets"
                ],
                "operationId": "ApiDataSetsGet",
                "produces": [],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DataSet"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "description": "To create a new dataset you need to provide the required settings and a sample JSON document that defines your document scheme to use\n",
                "tags": [
                    "DataSets"
                ],
                "operationId": "ApiDataSetsPost",
                "produces": [],
                "parameters": [
                    {
                        "name": "dataSet",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DataSet"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                },
                "deprecated": false
            }
        },
        "/api/DataSets/{name}": {
            "get": {
                "description": "To get information about a selected dataset you can refer by its name\n",
                "tags": [
                    "DataSets"
                ],
                "operationId": "ApiDataSetsByNameGet",
                "produces": [],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DataSet"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "description": "To delete a given dataset, you can refer by its name\n",
                "tags": [
                    "DataSets"
                ],
                "operationId": "ApiDataSetsByNameDelete",
                "produces": [],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "deprecated": false
            }
        },
        "/api/Documents/Sample": {
            "post": {
                "description": "Statistical method to support sampling activity. Using this method, you can easily create samples from a given dataset. The sampling process uses random selection from the given dataset\n",
                "tags": [
                    "Documents"
                ],
                "operationId": "ApiDocumentsSamplePost",
                "produces": [],
                "parameters": [
                    {
                        "name": "sampleSettings",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DocumentSampleSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/PaginatedList[Object]"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/Documents/{id}": {
            "get": {
                "description": "You can access a full document by id (refer to the IdField you defined in the DataSet creation)\n",
                "tags": [
                    "Documents"
                ],
                "operationId": "ApiDocumentsByIdGet",
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "object",
                            "description": "dynamic stuff use what you want"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Documents"
                ],
                "operationId": "ApiDocumentsByIdPut",
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "document",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Documents"
                ],
                "operationId": "ApiDocumentsByIdDelete",
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "deprecated": false
            }
        },
        "/api/Documents": {
            "post": {
                "description": "Inserting a new document you need to provide your predefined schema\n",
                "tags": [
                    "Documents"
                ],
                "operationId": "ApiDocumentsPost",
                "produces": [],
                "parameters": [
                    {
                        "name": "document",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/Documents/Filter": {
            "post": {
                "tags": [
                    "Documents"
                ],
                "operationId": "ApiDocumentsFilterPost",
                "produces": [],
                "parameters": [
                    {
                        "name": "filterSettings",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DocumentFilterSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/PaginatedList[Object]"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/Documents/Copy": {
            "post": {
                "tags": [
                    "Documents"
                ],
                "operationId": "ApiDocumentsCopyPost",
                "produces": [],
                "parameters": [
                    {
                        "name": "copySettings",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DocumentCopySettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "deprecated": false
            }
        },
        "/api/Documents/Move": {
            "post": {
                "tags": [
                    "Documents"
                ],
                "operationId": "ApiDocumentsMovePost",
                "produces": [],
                "parameters": [
                    {
                        "name": "moveSettings",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DocumentMoveSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "deprecated": false
            }
        },
        "/api/Tags": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "operationId": "ApiTagsGet",
                "produces": [],
                "parameters": [
                    {
                        "name": "withDetails",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Tag"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Tags"
                ],
                "operationId": "ApiTagsPost",
                "produces": [],
                "parameters": [
                    {
                        "name": "tag",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Tag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "201": {
                        "description": "Created"
                    }
                },
                "deprecated": false
            }
        },
        "/api/Tags/{id}": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "operationId": "ApiTagsByIdGet",
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "withDetails",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Tag"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Tags"
                ],
                "operationId": "ApiTagsByIdPut",
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tag",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Tag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Tag"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Tags"
                ],
                "operationId": "ApiTagsByIdDelete",
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "deprecated": false
            }
        }
    },
    "definitions": {
        "DataSet": {
            "required": [
                "Name",
                "NGramCount",
                "IdField",
                "TagField",
                "InterpretedFields",
                "SampleDocument"
            ],
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string",
                    "description": "Name of your dataset. Contains just A-Z letters and numbers without any space. After creating a dataset, you cannot modify it’s name. This field is unique\n"
                },
                "NGramCount": {
                    "format": "int32",
                    "type": "integer",
                    "description": "To deeper analyze your text, a dataset uses ngram to index your document. You can set the ngramcount from 1 to 6\n"
                },
                "IdField": {
                    "type": "string",
                    "description": "To identify a document you need to use IDs. You can use your own conventions to name your ID field, but in the settings you need to provide the field name of the id field from your sample document\n"
                },
                "TagField": {
                    "type": "string",
                    "description": "For text categorization we provide a predefined document field to store your tags (or categories). If your documents are related to tags or categories, please insert here the tags field name from your sample JSON\n"
                },
                "InterpretedFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For text analysis you can set those document fields that contains useful text content. Slamby is doing ngram analysis and text process related works on these fields. How to decide which field you need to set here? Only the interpreted field can be a part of text analyzes. To provide these fields just simply insert the needed text fields from your JSON document\n"
                },
                "Statistics": {
                    "description": "These are read only calculated values\n",
                    "readOnly": "true,",
                    "$ref": "#/definitions/DataSetStats"
                },
                "SampleDocument": {
                    "type": "object",
                    "description": "Using flexible document schema, you can store all of your required data inside one simple dataset. To create a dataset with your required schema you can provide a sample document. The schema is flexible; the only requirement is using standard JSON format\n"
                }
            }
        },
        "DataSetStats": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "DocumentsCount": {
                    "format": "int32",
                    "type": "integer",
                    "description": "shows the available document number"
                }
            }
        },
        "DocumentSampleSettings": {
            "required": [
                "Id",
                "Pagination"
            ],
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string",
                    "description": "It must be a random string for every new sampling, but must be the same for the same sampling during pagination. If you leave it empty than it'll be generated automatically, but then you can not use pagination\n"
                },
                "TagIds": {
                    "description": "You can create a sample from a whole dataset, or just from a given tag section. To create a sample from the whole dataset please keep it empty. To create a sample from a given number of tags please provide the tag ids\n",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "IsStratified": {
                    "description": "You can use stratified sampling. In this case the sampling will be created by tags. For general sampling don't use stratified sampling!\n",
                    "type": "boolean"
                },
                "Pagination": {
                    "$ref": "#/definitions/Pagination"
                },
                "Percent": {
                    "description": "Defining the sample size, you can use percentage or a given number. Using a percentage you can define the document number by a percentage. This percentage will calculate the document number by using the available dataset document number. E.g.: if your dataset contains 100.000 documents and you are using 10% as a sampling size without stratified method, your sample size is 100.000 x 10% = 10.000\n",
                    "format": "double",
                    "type": "number"
                },
                "Size": {
                    "description": "Define your sample size by providing a simple integer. E.g.: if your dataset contains 100.000 documents and you are using 3.000 as a sampling size without stratified method, your sample size is 3.000\n",
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Pagination": {
            "type": "object",
            "properties": {
                "Offset": {
                    "description": "How many element you want to skip. For example if the offset is 6, than the first element will be the 7. in the list\n",
                    "format": "int32",
                    "type": "integer"
                },
                "Limit": {
                    "description": "How many element you want to get back in this request\n",
                    "format": "int32",
                    "type": "integer"
                },
                "OrderDirection": {
                    "description": "The ordering of the list, Ascending or Descending\n",
                    "enum": [
                        "Asc",
                        "Desc"
                    ],
                    "type": "string"
                },
                "OrderByField": {
                    "description": "It must be an existing field. Declares the base of the ordering\n",
                    "type": "string"
                }
            }
        },
        "PaginatedList[Object]": {
            "type": "object",
            "properties": {
                "Items": {
                    "description": "Containing the actual displayed items. The type of the elements depend on the method\n",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "Pagination": {
                    "$ref": "#/definitions/Pagination"
                },
                "Count": {
                    "description": "The count of the actual returned items\n",
                    "format": "int32",
                    "type": "integer"
                },
                "Total": {
                    "description": "The count of all items which are the pagination applied\n",
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "DocumentFilterSettings": {
            "required": [
                "Pagination"
            ],
            "type": "object",
            "properties": {
                "TagIds": {
                    "description": "You can direct your search queries into specific tags. By giving the required tag id list, the filter will affect just the provided tags. It’s useful to create powerful search queries inside given tags. To filter inside a whole dataset, you can set this field to empty\n",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Pagination": {
                    "$ref": "#/definitions/Pagination"
                },
                "QueryDictionary": {
                    "description": "Set here the filers. The key of an element must be a valid field name, and the value is the query string you want to apply. Can be BOOL expressions. You can use these: AND, OR, NOT. For example: 'searchforthis AND NOT butnotthis'. Also you can use wildcards. For example: 'exampl*'\n",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "DocumentCopySettings": {
            "required": [
                "Ids",
                "DestinationDataSetName"
            ],
            "type": "object",
            "properties": {
                "Ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "DestinationDataSetName": {
                    "type": "string"
                }
            }
        },
        "DocumentMoveSettings": {
            "required": [
                "Ids",
                "DestinationDataSetName"
            ],
            "type": "object",
            "properties": {
                "Ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "DestinationDataSetName": {
                    "type": "string"
                }
            }
        },
        "Tag": {
            "required": [
                "Id",
                "Name"
            ],
            "type": "object",
            "properties": {
                "Id": {
                    "description": "The identifier of the tag. It must be unique accross the DataSet\n",
                    "type": "string"
                },
                "Name": {
                    "description": "Name of the tag\n",
                    "type": "string"
                },
                "ParentTagId": {
                    "description": "The identifier of the parent of the tag. It must be the id of an existing tag\n",
                    "type": "string"
                },
                "Properties": {
                    "$ref": "#/definitions/TagProperties",
                    "description": "These are read only calculated values\n"
                }
            }
        },
        "TagProperties": {
            "description": "Some calculated values for the tag\n",
            "readOnly": true,
            "type": "object",
            "properties": {
                "Path": {
                    "description": "A human readable path to the tag\n",
                    "type": "string"
                },
                "Level": {
                    "description": "The level of the tag in the hierarchy (root level is: 0)\n",
                    "format": "int32",
                    "type": "integer"
                },
                "IsLeaf": {
                    "description": "If the tag is a leaf tag. Leaf tag means the tag is not a parent of any other tags\n",
                    "type": "boolean"
                },
                "DocumentCount": {
                    "description": "Document count for the tag\n",
                    "format": "int32",
                    "type": "integer"
                },
                "WordCount": {
                    "description": "Word count for the tag\n",
                    "format": "int32",
                    "type": "integer"
                }
            }
        }
    }
}