swagger: '2.0'
info:
  version: 0.13.0
  title: Slamby API 0.13.0
  description: |    
    
    ## Changelog
    ### Features
    - extended process management 
    - Prc Service 
    - changes in Filter
    - export words and occurences for tags in CSV
    - export dictionaries of classifier or prc services in CSV
    
    ---
    
    Slamby introduces Slamby Service (API). Build powerful data management center, store and analyze your data easily. This documentation shows you a quick overview about the available API endpoints, technical details and business usage.
    With Slamby you can:
    * Store and manage your data easily
    * Get high data security and privacy
    * Use improved data analysis
    
    Once you've
    [registered your client](http://slamby.com/register/) it's easy
    to start working with Slamby API.
    
    All endpoints are only accessible via https and are located at
    `api.slamby.com`.
    ```
      https://api.slamby.com/CLIENT_ID
    ```
    
    > **Tip:** The `CLIENT_ID` is your unique identifier what you get after your server is ready to use.
    
    
    ### Authentication
    The base of the authentication is the `API_KEY`.
    You have to provide it in the authorization header. It is **required for every API call**.
    The examples of the documentation is preasuming that you provide the API key in the header.
    
    >*Example*
    >
      Header   |Value
      ---------|---
      Authorization|Slamby `API_KEY`
    
    &nbsp;
    
    >**Tip:** You will get your `API_KEY` after your server is ready to use.
    
    ### API Version
    
    Every response contains API version information in response HTTP `X-Api-Version` header.
    
    >*Example*
    >
    X-Api-Version: 0.11.0
    
    ## Dataset
    Slamby provides **Dataset** as a data storage. A dataset is a JSON document storage that allows to store schema free JSON objects, indexes and additional parameters. Inside your server you can create and manage multiple datasets.
    
    With dataset you can:
    * Create multiple datasets
    * Using schema free JSON objects
    * Set indexes for text processing
    * Running text analysis on the stored data
    
    > **Tip:** With schema free JSON storage you can easily store your existing schemas. Store document related data - such as image urls, prices - and build powerful queries.
    
    ### Create new Dataset
    Create a new dataset by providing a sample JSON document and additional parameters.
    
    
    
    *Example REQUEST*
    
    > [POST /api/DataSets](#operation--api-DataSets-post))
    ```JSON
    {
        "IdField": "id",
        "InterpretedFields": ["title", "desc"],
        "Name": "test1",
        "NGramCount": "3",
        "TagField": "tag",
        "SampleDocument": {
          "id": 9,
          "title": "Example Product Title",
          "desc": "Example Product Description",
          "tag": [1,2,3]
        }
    }
    ```
    
    *Example RESPONSE*
    >HTTP/1.1 201 CREATED
    
    ##### Check the DataSet schema definition [here](#/definitions/DataSet)
    
    ### Get Dataset
    Get information about a given dataset. A dataset can be accessed by its name.
    
    Returns with:
    * Dataset basic information
    * Dataset settings
    * Schema sample document
    * Dataset statistics
    
    *Example REQUEST*
    > [GET /api/DataSets/`example`](#operation--api-DataSets-get)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    {
      "Name": "example",
      "NGramCount": 3,
      "IdField": "id",
      "TagField": "tag",
      "InterpretedFields": [
        "title",
        "desc"
      ],
      "Statistics": {
        "DocumentsCount": 3
      },
      "SampleDocument": {
        "id": 1,
        "title": "Example title",
        "desc": "Example Description"
        "tag": [1,2,3]
      }
    }
    ```
    
    ##### Check the DataSet schema definition [here](#/definitions/DataSet)
    
    ### Get Dataset List
    Get a list of the available datasets.
    
    Returns with:
    * Dataset objects array
    
    *Example REQUEST*
    > [GET /api/DataSets](#operation--api-DataSets-get)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    [
      {
        "Name": "example",
        "NGramCount": 3,
        "IdField": "id",
        "TagField": "tags",
        "InterpretedFields": [
          "title",
          "desc"
        ],
        "Statistics": {
          "DocumentsCount": 3
        },
        "SampleDocument": {
          "id": 1,
          "title": "Example title",
          "desc": "Example Description"
          "tags": [1,2,3]
        }
      },
      {
        "Name": "example2",
        "NGramCount": 3,
        "IdField": "id",
        "TagField": "tags",
        "InterpretedFields": [
          "title",
          "desc"
        ],
        "Statistics": {
          "DocumentsCount": 3
        },
        "SampleDocument": {
          "id": 1,
          "title": "Example title",
          "desc": "Example Description"
          "tags": [1,2,3]
        }
      }
    ]
    ```
    
    ##### Check the DataSet schema definition [here](#/definitions/DataSet)
    
    ### Remove Dataset
    Removes a given dataset. All the stored data will be removed.
    
    *Example REQUEST*
    > [DELETE /api/DataSets/`example`](#operation--api-DataSets-delete)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    ## Document
    Manage your **documents** easily. Create, edit, remove and running text analysis.
    
    Every document is related to a dataset. You have to specify which dataset you want to use in the `X-DataSet` header by the name of the dataset.
    
    > **Tip:** If you use any of the Document methods without or an unexisting `X-DataSet` header you will get a `Missing X-DataSet header!` error.
    
    With document you can:
    * Insert multiple documents
    * Using your own schema
    * Accessing your documents easily
    * Modifying your documents easily
    * Running text analysis
    
    > **Tip:** Store all the related information - such as text, prices, image urls - and use powerful queries.
    
    ### Insert New Document
    Insert a new document to a dataset using the predefined schema.
    
    *Example REQUEST*
    > [POST /api/Documents](#operation--api-Documents-post)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    >
    ```JSON
    {
      "id": 9,
      "title": "Example Product Title",
      "desc": "Example Product Description",
      "tags": [1,2,3]
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 201 CREATED
    
    ### Get Document
    Get a document from a dataset.
    
    *Example REQUEST*
    > [GET /api/Documents/`9`](#operation--api-Documents-get)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    {
      "id": 9,
      "title": "Example Product Title",
      "desc": "Example Product Description",
      "tags": [1,2,3]
    }
    ```
    
    ### Edit Document
    Edit an existing document in a dataset.
    
    *Example REQUEST*
    > [PUT /api/Documents/`9`](#operation--api-Documents-put)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    ```JSON
    {
      "id": 9,
      "title": "Example Modified Product Title",
      "desc": "Example Modified Product Description",
      "tags": [1,2,3,4,5,6,7,8,9]
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    ### Delete Document
    Delete an existing document in a dataset.
    
    *Examle REQUEST*
    > [DELETE /api/Documents/`9`](#operation--api-Documents-delete)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    ### Copy To
    Copying documents from a dataset to another one. You can specify the documents by id. You can copy documents to an existing dataset.
    The selected documents will **remain in the source dataset** as well.
    
    *Example REQUEST*
    > [POST /api/Documents/Copy](#operation--api-Documents-Copy-post)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    ```JSON
    {
      "DestinationDataSetName": "TARGET_DATASET_NAME",
      "Ids": ["10", "11"]
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    > **Tip:** You can use the [POST /api/Documents/Sample](#operation--api-Documents-Sample-post) or the [POST /api/Documents/Filter](#operation--api-Documents-Filter-post) methods to get document ids easily.
    
    ### Move To
    
    Moving documents from a dataset to another one. You can specify documents by id. You can move documents to an existing dataset. 
    The selected documents will be **removed from the source dataset**.
    
    *Example REQUEST*
    > [POST /api/Documents/Move](#operation--api-Documents-Move-post)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    ```JSON
    {
      "DestinationDataSetName": "TARGET_DATASET_NAME",
      "Ids": ["10", "11"]
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    > **Tip:** You can use the [POST /api/Documents/Sample](#operation--api-Documents-Sample-post) or the [POST /api/Documents/Filter](#operation--api-Documents-Filter-post) methods to get document ids easily.
    
    
    
    ## Tags
    Manage tags to organize your data. Using tags create a tag cloud or a hiearchical tag tree.
    
    Every tag is related to a Dataset. You have to specify which dataset you want to use in the `X-DataSet` header by the name of the dataset.
    
    > **Tip:** If you use any of the tag methods without or an unexisting `X-DataSet` header you will get a `Missing X-DataSet header!` error.
    
    With Tags you can:
    * Create new tag
    * Update a tag
    * Get a single tag or a full tag list
    * Organize your tags into hierarchy
    * Use tags for categorization
    * Use tags for tagging.
    
    ### Create New Tag
    Create a new tag in a dataset.
    
    >**Tip:** To create hierarchy you have to specify the ParentId of the tag. The ParentId is the Id of the parent of the tag. In the dataset there must be an existing tag with the id given in the ParentId. If the tag is a root element, or you don't want to use hierarchy then just skip the property or set to `null`.
    
    *Example REQUEST*
    > [POST /api/Tags](#operation--api-Tags-post)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    ```JSON
    {
      "Id": "1",
      "Name": "example tag 1",
      "ParentId": null
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 201 CREATED
    
    
    ### Get Tag
    Get a tag by its Id. Provide 'withDetails=true' query parameter in order to get DocumentCount, WordCount values. Default value is 'false' because it takes time to calculate these properties.
    
    *Example REQUEST*
    > [GET /api/Tags/`1`?withDetails=false](#operation--api-Tags-get)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
      
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    {
      "Id": "1",
      "Name": "example tag 1",
      "ParentId": "5",
      "Properties": {
        "Path": [
          {
            "Id": "5",
            "Level": "1",
            "Name": "example parent tag 5"
            }
          ],
        "Level": 2,
        "IsLeaf": "false",
        "DocumentCount": 33,
        "WordCount": 123
        }
    }
    ```
    
    ### Get Tag List
    Get all tags list from a given dataset. Provide 'withDetails=true' query parameter in order to get DocumentCount, WordCount values. Default value is 'false' because it takes time to calculate these properties.
    
    *Example REQUEST*
    > [GET /api/Tags?withDetails=false](#operation--api-Tags-get)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    [
      {
        "Id": "1",
        "Name": "example tag 1",
        "ParentId": null,
        "Properties": {
          "Path": [],
          "Level": 1,
          "IsLeaf": true,
          "DocumentCount": 0,
          "WordCount": 0
        }
      },
      {
        "Id": "2",
        "Name": "example tag 2",
        "ParentId": null,
        "Properties": {
          "Path": [],
          "Level": 1,
          "IsLeaf": true,
          "DocumentCount": 0,
          "WordCount": 0
        }
      }
    ]
    ```
    
    ### Update Tag
    
    *Example REQUEST*
    > [PUT /api/Tags/`1`](#operation--api-Tags-put)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    ```JSON
    {
      "Id": "1",
      "Name": "example tag 1",
      "ParentId": null
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 200 CREATED
    
    ### Remove Tag
    Remove a tag from tag list. Default behavior is that only leaf elements can be deleted. You should provide 'force=true' query parameter in order to remove tags with child elements. 'cleanDocument'. Setting 'cleanDocuments=true' removes the specified tag also from its documents.
    
    *Example REQUEST*
    > [DELETE /api/Tags/`1`?force=false&cleanDocuments=false](#operation--api-Tags-delete)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    ## Sampling
    Statistical method to support sampling activity. Using sampling you can easily create **random samples** for experiments.
    
    With sampling you can:
    - Create sample easily
    - Set the source categories
    - Use normal or stratified sampling method
    - Set sample size by fix number or percentage
    - Use built in pagination.
    
    For sampling you have to specify which dataset you want to use in the `X-DataSet` header by the name of the dataset.
    
    *Example REQUEST*
    > [POST /api/Documents/Sample](#operation--api-Documents-Sample-post)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    ```JSON
    {
      "Id" : "6902a2d3-0708-41f7-b21d-c5bd4b302bdc",
      "IsStratified" : "false",
      "Percent" : "0",
      "Size" : "15000",
      "TagIds" : [],
      "Pagination" : {
          "Offset" : 0,
          "Limit": 100,
          "OrderDirection" : "Asc",
          "OrderByField" : "id"
      }
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    {
      "Items": [
        {
          "id": "1455197295447",
          "title": "example title",
          "desc": "example description",
          "tags": [
            "2",
            "3"
          ]
        },
        {
          "id": "1455197591439",
          "title": "example title",
          "desc": "example description",
          "tags": [
            "3"
          ]
        },
        ...
      ],
      "Pagination": {
        "Offset": 0,
        "Limit": 100,
        "OrderDirection": "Asc",
        "OrderByField": "desc"
      },
      "Count": 100,
      "Total": 15000
    }
    ```
    
    ##### For the parameters explanation check the DocumentSampleSettings schema definition [here](#/definitions/DocumentSampleSettings)
    ##### For the pagination explanation check the pagination section [here](#pagination)
    
    ## Filter
    Powerful **search engine**. Build **smart** search functions or filters. Easily access to your datasets with **simple queries**, **logical expressions** and **wild cards**. Manage your language dependencies using **optinal tokenizer**.
    
    With Filter you can:
    * Create simple search queries
    * Filter by tags
    * Search in multiple fields
    * Access to all the available document fields and parameters
    * Use logical expressions
    * Use wild cards
    * Use optional tokenizers
    * Use built in pagination
    
    *Example REQUEST*
    > [POST /api/Documents/Filter](#operation--api-Documents-Filter-post)
    >
      Header   |Value
      ---------|---
      X-DataSet|example
    ```JSON
    {
        "Filter" : {
          "TagIds" : ["1"],
          "Query" : "title:michelin"
        },
        "Pagination" : {
            "Offset" : 0,
            "Limit": 100,
            "OrderDirection" : "Asc",
            "OrderByField" : "title"
        }
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    {
      "Items": [
        {
          "id": "1455197455453",
          "title": "example title 1",
          "desc": "example description",
          "tags": [
            "1"
          ]
        },
        {
          "id": "1455197455203",
          "title": "example title 2",
          "desc": "example description",
          "tags": [
            "1"
          ]
        },
        ...
      ],
      "Pagination": {
        "Offset": 0,
        "Limit": 100,
        "OrderDirection": "Asc",
        "OrderByField": "title"
      },
      "Count": 100,
      "Total": 1543
    }
    ```
    
    ##### For the parameters explanation check the DocumentFilterSettings schema definition [here](#/definitions/DocumentFilterSettings)
    ##### For the pagination explanation check the pagination section [here](#pagination)
    
    
    > **Tip:** Easily create a powerful search engine by using tokenizer and detailed search queries.
    
    ## Services
    Slamby introduces services. You can quickly create a data processing service from the available service templates. Manage your data processing with services, run different tests, run more data management services parallelly.
    
    **Service definition:** a data management service with custom settings, dedicated resources and available API endpoint.
    
    With services you can:
    * Create a service
    * Get your services list
    * Get a service
    * Remove a service
    * Manage processes
    
    ### Get Service
    You can get general information about a service using the Id of the service
    
    *Example REQUEST*
    > [GET /api/Services/`GUID`](#operation--api-Services-get)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    {
      "Id": "57c845dc-6aa4-475c-bbf2-0d682f471f32",
      "Name": "Example name of a service",
      "Description": "This is an example service description",
      "Status": "New",
      "Type": "Classifier",
      "ProcessIdList": [
        "e251dbbf-04ff-4d34-a959-90dc4a602142",
        "d335edaf-354a-482c-ade4-4d8172f81a40"
      ],
      "ActualProcessId": null
    }
    ```
    
    ### Create New Service
    Create a new Service
    
    *Example REQUEST*
    > [POST /api/Services](#operation--api-Services-post)
    ```JSON
    {
      "Name": "Example name of a service",
      "Description": "This is an example service description",
      "Type" : "Classifier"
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 201 CREATED
    
    ### Update Service
    You can update only the Name and the Description field.
    *Example REQUEST*
    > [PUT /api/Services/`GUID`](#operation--api-Services-put)
    ```JSON
    {
      "Name": "Updated example name of a service",
      "Description": "This is an updated example service description"
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 200 CREATED
    
    
     ### Remove Service
    You remove a service anytime. If it's in Activated status then it will be Deactivated first. If it's in Busy status then it will be cancelled first.
    
    *Example REQUEST*
    > [DELETE /api/Services/`GUID`](#operation--api-Services-delete)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    
    ## Classifier Service
    Service for text classification. Create a classifier service from a selected dataset, specify your settings and use this service API endpoint to classify your incoming text.
    
    > Currently Slamby provides `Slamby Twister` as a highly accurate classification algorithm designed for e-commerce market.
    
    ### Get Classifier Service
    You can get classifier specified information about a classifier service with the Id of the service
    
    *Example REQUEST*
    > [GET /api/Services/Classifier/`GUID`](#operation--api-Services-Classifier-get)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    {
      "Id": "83326e75-dd16-4e5c-a66d-5ea5197bd8e0",
      "Name": "Example name of a classifier service",
      "Description": "This is an example classifier service description",
      "Status": "New",
      "Type": "Classifier",
      "ProcessIdList": null,
      "ActualProcessId": null,
      "PrepareSettings": null,
      "ActivateSettings": null
    }
    ```
    
    ### Prepare Classifier Service
    Training Process Steps:
    1. Give a suitable name to the service,
    2. Set the ngram values,
    3. Provide the tag ids the you are going to use during the training,
    4. Start the training process.
    
    > For Training process Slamby is using `Slamby Twister` as its own classification algorithm. 
    
    This request is a long running task so the API do it in async way. Therefore the response is a Process.
    
    > `N-gram seetings`: each dataset has an n-gram setting. For set the required n-gram the minimum value is 1, the maximum value equals with the maximum n-gram number of the given dataset. Using a [1,2,3] n-gram settings means during the training process the classifier is going to create 1,2,3 n-gram dictionaries. [Learn more about N-gram](https://en.wikipedia.org/wiki/N-gram)
    
    *Example REQUEST*
    > [POST /api/Services/Classifier/`GUID`/Prepare](#operation--api-Services-Classifier-Prepare-post)
    ```JSON
    {
      "DataSetName" : "test dataset",
      "NGramList": [1,2],
      "TagIdList": ["tag1Id","tag2Id"]
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 202 ACCEPTED
    ```JSON
    {
      "Id": "d335edaf-354a-482c-ade4-4d8172f81a40",
      "Start": "2016-03-16T13:12:15.5520625Z",
      "End": "0001-01-01T00:00:00",
      "Percent": 0,
      "Status": "InProgress"
    }
    ```
    
    ### Activate Classifier Service
    Each service has two status: active, deactive. When a preparation/training process is ready, the service has a deactivated status. A deactivated service is ready, but its not loaded into memory and the API is not able to process the incoming requests. To use a service set the status to Activated. After the activation process the service is ready to use, all the required files are loaded and stored in memory, the API endpoint is active.
    
    *Example REQUEST*
    > [POST /api/Services/Classifier/`GUID`/Activate](#operation--api-Services-Classifier-Activate-post)
    ```JSON
    {
      "NGramList": [1,2],
      "EmphasizedTagIdList": null,
      "TagIdList": null
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    ### Deactivate Classifier Service
    When a service is not needed for continous usage you can deactivate it. After deactivating a service, all the settings and files remain, but they are not using any resources (memory, cores). You can store your deactivated services and activate them anytime.
    
    *Example REQUEST*
    > [POST /api/Services/Classifier/`GUID`/Deactivate](#operation--api-Services-Classifier-Deactivate-post)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    ### Recommend
    Built-in text classification engine. Uses the prepared Classifier dictionaries and calculations. High speed and classification capability. Built-in n-gram analyzer.
    
    *Example Request*
    > [POST /api/Services/Classifier/`GUID`/Recommend](#operation--api-Services-Classifier-Recommend-post)
    ```JSON
    {
      "Text": "Lorem Ipsum Dolorem",
      "Count": "2",
      "UseEmphasizing": false,
      "NeedTagInResults": true,
      
    }
    ```
    
    *Example Response*
    ```JSON
    [
      {
        "TagId": "324",
        "Score": 0.35175663155586434,
        "Tag": {
          "Id": "324",
          "Name": "Tag name",
          "ParentId": "16",
          "Properties": null
        }
      },
      {
        "TagId": "232",
        "Score": 0.30277479057126688,
        "Tag": {
          "Id": "232",
          "Name": "Tag name",
          "ParentId": "24",
          "Properties": null
        }
      }
    ]
    ```
    
    ### Export dictionaries
    Export prepared dictionaries as CSV files. Downlaod them via process management.
    
    *Example Request*
    > [POST /api/Services/Classifier/`GUID`/ExportDictionaries](#operation--api-Services-Classifier-ExportDictionaries-post)
    ```JSON
    {
      "NGramList": [1],
      "TagIdList": null
    }
    ```
    
    > **Tip:** If you skip the `TagIdList` or set it to `null` than the API will use all the leaf tags
    
    *Example Response*
    ```JSON
    {
      "Id": "345e1c79-dc78-427f-8ad1-facce75f6ae3",
      "Start": "2016-04-18T13:29:15.3728991Z",
      "End": "2016-04-18T13:29:39.3144202Z",
      "Percent": 0,
      "Description": "Exporting dictionaries from Classifier service prc...",
      "Status": "Finished",
      "Type": "ClassifierExportDictionaries",
      "ErrorMessages": [],
      "ResultMessage": "Successfully exported dictionaries from Classifier service prc!\nExport file can be download from here: https://api.slamby.com/demo-api/files/345e1c79-dc78-427f-8ad1-facce75f6ae3.zip"
    }
    ```
    
    ## Prc Service
    
    Service for similar document detection, document match-making, keyword extraction, duplicated document detection.

    *PRC Service analyzes incoming documents, extracting keywords, doing similarity detection or recommendation and providing resut document list with relevance score.*

    > PRC uses Slamby Twister for keyword extraction.
    
    ### Get Prc Service
    Get a PRC Service object. For analysis use `PRC/Recommend`.

    *Example REQUEST*
    > [GET /api/Services/Prc/`GUID`](#operation--api-Services-Prc-get)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    {
      "PrepareSettings": null,
      "ActivateSettings": null,
      "Id": "996f91f4-f1ca-428b-af1a-929ccf3b0243",
      "Name": "prc",
      "Description": null,
      "Status": "New",
      "Type": "Prc",
      "ProcessIdList": [],
      "ActualProcessId": null
    }
    ```
    
    Where:
        
    Field Name  | Description
    ---         | ---
    PrepareSettings | Preparation settings. It will be given during the first preparation.
    ActivateSettings  | Activation settings. It will be given during the first activation.
    Id  | Service ID. Use it for integration.
    Name  | Name of the service.
    Description | Description of the service.
    Status  | Current status of the service.
    Type: | Prc
    ProcessIdList:  | Related historical process object list.
    ActualProcessId:  | Currently related process id. Get the actual process id and then manage the current process. Get timing, status, or cancel it.
    
    Prc service creation steps:
    1. Create a new service,
    2. Set the preparation settings and start prepare process,
    3. Set Activation settings and activate,
    4. Use Prc for recommendation or duplicate checking.
    
    ### Create Prc Service
    Create PRC Service. Required fileds:
    
    Name  | Name of the service
    Description |  Desc
    Type  | Prc
    
    > For Prc Service creation, the first step is to create one. After creation, the service status is `New`, it has an id, name and description, but there is no custom settings yet, and there is no working API endpoint.
        
    ### Prepare Prc Service
    After creating a new Prc service, the next step is to customize your settings and start the training/preparation process.
    
    Custom Settings:
    
    DataSetName | Given dataset that you are using as a training database
    TagIdList | Basic value: null. When its empty, all the leaf tags will be trained. You can set it manually by providing your id list for training.
    
    `Preparation Process`:
    - Using the given dataset and given ID list,
    - Slamby is doing a training process, analyzing all the keywords, text contect based on the categories.
    
    *Example REQUEST*
    > [POST /api/Services/Prc/`GUID`/Prepare](#operation--api-Services-Prc-Prepare-post)
    ```JSON
    {
      "DataSetName" : "test dataset",
      "TagIdList": ["tag1Id","tag2Id"]
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 202 ACCEPTED
    ```JSON
    {
      "Id": "ceed2045-70fb-4785-b483-aadb9bf9a992",
      "Start": "2016-04-18T13:09:49.6032716Z",
      "End": "0001-01-01T00:00:00",
      "Percent": 0,
      "Description": "Preparing Prc service prc...",
      "Status": "InProgress",
      "Type": "PrcPrepare",
      "ErrorMessages": [],
      "ResultMessage": ""
    }
    ```
    
    ### Activate Prc Service
    Prepared service, settings and related files are loaded into memory, via the dedicated API endpoint you can use it for production.
    
    *Example REQUEST*
    > [POST /api/Services/Prc/`GUID`/Activate](#operation--api-Services-Prc-Activate-post)
    ```JSON
    {
      "FieldsForRecommendation": ["title"]
    }
    ```
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    ### Deactivate Prc Service
    
    *Example REQUEST*
    > [POST /api/Services/Prc/`GUID`/Deactivate](#operation--api-Services-Prc-Deactivate-post)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    
    ### Recommend
    Dedicated service end point for analyzing text.
    
    Parameters:
    
    Text  | Input text to analyze
    Count | Int field, number of result items in response body
    Filter  | Use filter object from the Filter. You can pre-filter your dataset, and doing the analysis on the result.
    Weights | Set dataset fileds and use weight to customize your order. You can use all the given dataset fileds from the sample document as weight. Weight can be any number between [-10 10].
    TagId | Target Tag ID where the analysis is going to be processed.
    NeedDocumentInResult  | `True` => detailed document response, providing full json documents<br>`False` => Just result document IDs in response.
    
    *Example Request*
    > [POST /api/Services/Prc/`GUID`/Recommend](#operation--api-Services-Prc-Recommend-post)
    ```JSON
    {
      "Text": "Lorem Ipsum Dolorem",
      "Count": "2",
      "Filter": null,
      "Weights": null,
      "TagId": "tag1Id",
      "NeedDocumentInResult": true
    }
    ```
    
    *Example Response*
    ```JSON
    [
      {
        "DocumentId": "1777237",
        "Score": 0.89313365295595715,
        "Document": {
          "id": "1777237",
          "tag_id": "tag1Id",
          "title": "Lorem",
          "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"
        }
      },
      {
        "DocumentId": "6507461",
        "Score": 0.7894283811358983,
        "Document": {
          "ad_id": "6507461",
          "tag_id": "tag1Id",
          "title": "Duis aute irure dolorem",
          "body": "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."
        }
      }
    ]
    ```
    
    ### Export dictionaries
    Export the available dictionaries after preparation. Download as CSV files using internal processes.
    
    *Example Request*
    > [POST /api/Services/Prc/`GUID`/ExportDictionaries](#operation--api-Services-Prc-ExportDictionaries-post)
    ```JSON
    {
      "TagIdList": null
    }
    ```
    
    > **Tip:** If you skip the `TagIdList` or set it to `null` than the API will use all the leaf tags
    
    *Example Response*
    ```JSON
    {
      "Id": "345e1c79-dc78-427f-8ad1-facce75f6ae3",
      "Start": "2016-04-18T13:29:15.3728991Z",
      "End": "2016-04-18T13:29:39.3144202Z",
      "Percent": 0,
      "Description": "Exporting dictionaries from Prc service prc...",
      "Status": "Finished",
      "Type": "PrcExportDictionaries",
      "ErrorMessages": [],
      "ResultMessage": "Successfully exported dictionaries from Prc service prc!\nExport file can be download from here: https://api.slamby.com/demo-api/files/345e1c79-dc78-427f-8ad1-facce75f6ae3.zip"
    }
    ```
    
    
    
    ## Processes
    There are long running tasks in the Slamby API. These requests are served in async way. These methods returns with `HTTP/1.1 202 ACCEPTED`and with a Process object.
    
    > **Tip:** You can cancel a process anytime during its progress
    
    ### Get Process information
    Get a process by its Id.
    
    *Example REQUEST*
    > [GET /api/Processes/`GUID`](#operation--api-Processes-get)
    
    *Example RESPONSE*
    > HTTP/1.1 200 OK
    ```JSON
    {
      "Id": "958c1bdd-cd21-48f6-b9ec-c232271adec5",
      "Start": "2016-04-18T16:04:04.2156558Z",
      "End": "0001-01-01T00:00:00",
      "Percent": 0,
      "Description": "Exporting words from 1 tag(s) of dataset test...",
      "Status": "InProgress",
      "Type": "TagsExportWords",
      "ErrorMessages": [],
      "ResultMessage": null
    }
    ```
    
    ### Cancel Process
    Cancel the process. Only Process with status `InProgress` can be canceled. The method returns with `HTTP/1.1 202 ACCEPTED` because it can take time to cancel a process. You have to check periodically that whether the process status is already `Canceled`.
    
    *Example REQUEST*
    > [POST /api/Processes/`GUID`](#operation--api-Processes-Cancel-post)
    
    *Example RESPONSE*
    > HTTP/1.1 202 ACCEPTED
    
    ##### For the parameters explanation check the Process schema definition [here](#/definitions/Process)
    
    ## General
    
    
    ### Pagination
    There are situations when your query results lots of data. In these cases the pagination can be handy.
    You have to only provide an offset and a limit in the pagination object.
    Optionally you can set a field which will be the base of the ordering and also the direction of the ordering (ascendig or descending). If you specify `-1` value for `Limit` then you will get all the elements in one result.
    
    In the result (PaginatedList[Object]) there is an Items property which containing the requested elements (or the part of the requested elements). Also it provides the count of the items (this is equal or lesser than the limit property) and the total count of the requested items. Also it returns the same pagination object which was int the request.
    
    >*Example REQUEST*
    ```json
    {
        ...
        "Pagination" : {
            "Offset" : 0,
            "Limit": 10,
            "OrderDirection" : "Asc",
            "OrderByField" : "title"
        }
    }
    ```
    
    >*Example RESPONSE*
    ```json
    {
      "Items": [
        {
          ...
        },
        {
          ...
        },
        ...
      ],
      "Pagination": {
        "Offset": 0,
        "Limit": 100,
        "OrderDirection": "Asc",
        "OrderByField": "title"
      },
      "Count": 10,
      "Total": 21
    }
    ```
    
    ##### Check the Pagination schema definition [here](#/definitions/Pagination)
    ##### Check the PaginatedList[Object] schema definition [here](#/definitions/PaginatedList[Object])

  termsOfService: None
basePath: /
paths:
  /api/DataSets:
    get:
      tags:
        - DataSets
      operationId: ApiDataSetsGet
      produces: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/DataSet'
      deprecated: false
    post:
      tags:
        - DataSets
      operationId: ApiDataSetsPost
      produces: []
      parameters:
        - name: dataSet
          in: body
          required: false
          schema:
            $ref: '#/definitions/DataSet'
      responses:
        '201':
          description: Created
      deprecated: false
  '/api/DataSets/{name}':
    get:
      tags:
        - DataSets
      operationId: ApiDataSetsByNameGet
      produces: []
      parameters:
        - name: name
          in: path
          required: true
          type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DataSet'
      deprecated: false
    delete:
      tags:
        - DataSets
      operationId: ApiDataSetsByNameDelete
      produces: []
      parameters:
        - name: name
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
      deprecated: false
  /api/Documents/Bulk:
    post:
      tags:
        - Documents
      operationId: ApiDocumentsBulkPost
      produces: []
      parameters:
        - name: settings
          in: body
          required: false
          schema:
            $ref: '#/definitions/DocumentBulkSettings'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BulkResults'
      deprecated: false
  '/api/Documents/{id}':
    get:
      tags:
        - Documents
      operationId: ApiDocumentsByIdGet
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Object'
      deprecated: false
    put:
      tags:
        - Documents
      operationId: ApiDocumentsByIdPut
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: document
          in: body
          required: false
          schema:
            $ref: '#/definitions/Object'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Object'
      deprecated: false
    delete:
      tags:
        - Documents
      operationId: ApiDocumentsByIdDelete
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
      deprecated: false
  /api/Documents:
    post:
      tags:
        - Documents
      operationId: ApiDocumentsPost
      produces: []
      parameters:
        - name: document
          in: body
          required: false
          schema:
            $ref: '#/definitions/Object'
      responses:
        '201':
          description: Created
      deprecated: false
  /api/Documents/Filter:
    post:
      tags:
        - Documents
      operationId: ApiDocumentsFilterPost
      produces: []
      parameters:
        - name: filterSettings
          in: body
          required: false
          schema:
            $ref: '#/definitions/DocumentFilterSettings'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PaginatedList[Object]'
        '400':
          description: ''
          schema:
            $ref: '#/definitions/ErrorsModel'
      deprecated: false
  /api/Documents/Sample:
    post:
      tags:
        - Documents
      operationId: ApiDocumentsSamplePost
      produces: []
      parameters:
        - name: sampleSettings
          in: body
          required: false
          schema:
            $ref: '#/definitions/DocumentSampleSettings'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PaginatedList[Object]'
      deprecated: false
  /api/Documents/Copy:
    post:
      tags:
        - Documents
      operationId: ApiDocumentsCopyPost
      produces: []
      parameters:
        - name: copySettings
          in: body
          required: false
          schema:
            $ref: '#/definitions/DocumentCopySettings'
      responses:
        '200':
          description: OK
      deprecated: false
  /api/Documents/Move:
    post:
      tags:
        - Documents
      operationId: ApiDocumentsMovePost
      produces: []
      parameters:
        - name: moveSettings
          in: body
          required: false
          schema:
            $ref: '#/definitions/DocumentMoveSettings'
      responses:
        '200':
          description: OK
      deprecated: false
  /api/Processes:
    get:
      tags:
        - Processes
      operationId: ApiProcessesGet
      produces: []
      parameters:
        - name: allStatus
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Process'
      deprecated: false
  '/api/Processes/{id}':
    get:
      tags:
        - Processes
      operationId: ApiProcessesByIdGet
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Process'
      deprecated: false
  '/api/Processes/{id}/Cancel':
    post:
      tags:
        - Processes
      operationId: ApiProcessesByIdCancelPost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '202':
          description: Accepted
      deprecated: false
  '/api/Services/Classifier/{id}':
    get:
      tags:
        - Services
      operationId: ApiServicesClassifierByIdGet
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ClassifierService'
      deprecated: false
  '/api/Services/Classifier/{id}/Prepare':
    post:
      tags:
        - Services
      operationId: ApiServicesClassifierByIdPreparePost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: classifierPrepareSettings
          in: body
          required: false
          schema:
            $ref: '#/definitions/ClassifierPrepareSettings'
      responses:
        '202':
          description: ''
          schema:
            $ref: '#/definitions/Process'
      deprecated: false
  '/api/Services/Classifier/{id}/Activate':
    post:
      tags:
        - Services
      operationId: ApiServicesClassifierByIdActivatePost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: classifierActivateSettings
          in: body
          required: false
          schema:
            $ref: '#/definitions/ClassifierActivateSettings'
      responses:
        '200':
          description: ''
      deprecated: false
  '/api/Services/Classifier/{id}/Deactivate':
    post:
      tags:
        - Services
      operationId: ApiServicesClassifierByIdDeactivatePost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: ''
      deprecated: false
  '/api/Services/Classifier/{id}/Recommend':
    post:
      tags:
        - Services
      operationId: ApiServicesClassifierByIdRecommendPost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/ClassifierRecommendationRequest'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/ClassifierRecommendationResult'
      deprecated: false
  '/api/Services/Classifier/{id}/ExportDictionaries':
    post:
      tags:
        - Services
      operationId: ApiServicesClassifierByIdExportDictionariesPost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: settings
          in: body
          required: false
          schema:
            $ref: '#/definitions/ExportDictionariesSettings'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Process'
      deprecated: false
  /api/Services:
    get:
      tags:
        - Services
      operationId: ApiServicesGet
      produces: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
      deprecated: false
    post:
      tags:
        - Services
      operationId: ApiServicesPost
      produces: []
      parameters:
        - name: service
          in: body
          required: false
          schema:
            $ref: '#/definitions/Service'
      responses:
        '201':
          description: Created
      deprecated: false
  '/api/Services/{id}':
    get:
      tags:
        - Services
      operationId: ApiServicesByIdGet
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    put:
      tags:
        - Services
      operationId: ApiServicesByIdPut
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: service
          in: body
          required: false
          schema:
            $ref: '#/definitions/Service'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Service'
      deprecated: false
    delete:
      tags:
        - Services
      operationId: ApiServicesByIdDelete
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
      deprecated: false
  '/api/Services/Prc/{id}':
    get:
      tags:
        - Services
      operationId: ApiServicesPrcByIdGet
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PrcService'
      deprecated: false
  '/api/Services/Prc/{id}/Prepare':
    post:
      tags:
        - Services
      operationId: ApiServicesPrcByIdPreparePost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: prcPrepareSettings
          in: body
          required: false
          schema:
            $ref: '#/definitions/PrcPrepareSettings'
      responses:
        '202':
          description: ''
          schema:
            $ref: '#/definitions/Process'
      deprecated: false
  '/api/Services/Prc/{id}/Activate':
    post:
      tags:
        - Services
      operationId: ApiServicesPrcByIdActivatePost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: prcActivateSettings
          in: body
          required: false
          schema:
            $ref: '#/definitions/PrcActivateSettings'
      responses:
        '200':
          description: ''
      deprecated: false
  '/api/Services/Prc/{id}/Deactivate':
    post:
      tags:
        - Services
      operationId: ApiServicesPrcByIdDeactivatePost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: ''
      deprecated: false
  '/api/Services/Prc/{id}/Recommend':
    post:
      tags:
        - Services
      operationId: ApiServicesPrcByIdRecommendPost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: request
          in: body
          required: false
          schema:
            $ref: '#/definitions/PrcRecommendationRequest'
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/PrcRecommendationResult'
      deprecated: false
  '/api/Services/Prc/{id}/ExportDictionaries':
    post:
      tags:
        - Services
      operationId: ApiServicesPrcByIdExportDictionariesPost
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: settings
          in: body
          required: false
          schema:
            $ref: '#/definitions/ExportDictionariesSettings'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Process'
      deprecated: false
  /api/Tags/Bulk:
    post:
      tags:
        - Tags
      operationId: ApiTagsBulkPost
      produces: []
      parameters:
        - name: settings
          in: body
          required: false
          schema:
            $ref: '#/definitions/TagBulkSettings'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/BulkResults'
      deprecated: false
  /api/Tags/CleanDocuments:
    post:
      tags:
        - Tags
      operationId: ApiTagsCleanDocumentsPost
      produces: []
      responses:
        '200':
          description: ''
      deprecated: false
  /api/Tags:
    get:
      tags:
        - Tags
      operationId: ApiTagsGet
      produces: []
      parameters:
        - name: withDetails
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
      deprecated: false
    post:
      tags:
        - Tags
      operationId: ApiTagsPost
      produces: []
      parameters:
        - name: tag
          in: body
          required: false
          schema:
            $ref: '#/definitions/Tag'
      responses:
        '201':
          description: Created
      deprecated: false
  '/api/Tags/{id}':
    get:
      tags:
        - Tags
      operationId: ApiTagsByIdGet
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: withDetails
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
    put:
      tags:
        - Tags
      operationId: ApiTagsByIdPut
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: tag
          in: body
          required: false
          schema:
            $ref: '#/definitions/Tag'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Tag'
      deprecated: false
    delete:
      tags:
        - Tags
      operationId: ApiTagsByIdDelete
      produces: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: force
          in: query
          required: false
          type: boolean
        - name: cleanDocuments
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: OK
      deprecated: false
  /api/Tags/ExportWords:
    post:
      tags:
        - Tags
      operationId: ApiTagsExportWordsPost
      produces: []
      parameters:
        - name: settings
          in: body
          required: false
          schema:
            $ref: '#/definitions/TagsExportWordsSettings'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Process'
      deprecated: false
definitions:
  DataSet:
    required:
      - Name
      - NGramCount
      - IdField
      - TagField
      - InterpretedFields
      - SampleDocument
    type: object
    properties:
      Name:
        type: string
        description: >
          Name of your dataset. Contains just A-Z letters and numbers without any
          space. After creating a dataset, you cannot modify it’s name. This
          field is unique
      NGramCount:
        format: int32
        type: integer
        description: >
          To deeper analyze your text, a dataset uses ngram to index your
          document. You can set the ngramcount from 1 to 6
      IdField:
        type: string
        description: >
          To identify a document you need to use IDs. You can use your own
          conventions to name your ID field, but in the settings you need to
          provide the field name of the id field from your sample document
      TagField:
        type: string
        description: >
          For text categorization we provide a predefined document field to store
          your tags (or categories). If your documents are related to tags or
          categories, please insert here the tags field name from your sample
          JSON
      InterpretedFields:
        type: array
        items:
          type: string
        description: >
          For text analysis you can set those document fields that contains
          useful text content. Slamby is doing ngram analysis and text process
          related works on these fields. How to decide which field you need to
          set here? Only the interpreted field can be a part of text analyzes. To
          provide these fields just simply insert the needed text fields from
          your JSON document
      Statistics:
        description: |
          These are read only calculated values
        readOnly: 'true,'
        $ref: '#/definitions/DataSetStats'
      SampleDocument:
        $ref: '#/definitions/Object'
        description: >
          Using flexible document schema, you can store all of your required data
          inside one simple dataset. To create a dataset with your required
          schema you can provide a sample document. The schema is flexible; the
          only requirement is using standard JSON format
  DataSetStats:
    type: object
    readOnly: true
    properties:
      DocumentsCount:
        format: int32
        type: integer
        description: Shows the available document number
  Object:
    type: object
    description: >
      General Object. This gives the flexible document schema. There isn't fixed
      structure for this. Can have any primitive or complex type properties
    properties: {}
  DocumentBulkSettings:
    required:
      - Documents
    type: object
    properties:
      Documents:
        type: array
        items:
          $ref: '#/definitions/Object'
        description: |
          Array of the documents to be saved
  BulkResults:
    type: object
    properties:
      Results:
        type: array
        items:
          $ref: '#/definitions/BulkResult'
        readOnly: true
  BulkResult:
    type: object
    properties:
      StatusCode:
        format: int32
        type: integer
      Id:
        type: string
      Error:
        type: string
    description: >
      Result of a bulk save element. If the save was successful then the
      StatusCode is 2XX. If there was a problem, the StatusCode is not 2XX, and
      the error message is in the Error field
  DocumentFilterSettings:
    required:
      - Pagination
    type: object
    properties:
      Pagination:
        $ref: '#/definitions/Pagination'
      IdsOnly:
        description: |
          Query returns only with Id field values
        type: boolean
      Filter:
        $ref: '#/definitions/Filter'
  Pagination:
    type: object
    properties:
      Offset:
        description: >
          How many element you want to skip. For example if the offset is 6, than
          the first element will be the 7. in the list
        format: int32
        type: integer
      Limit:
        description: |
          How many element you want to get back in this request
        format: int32
        type: integer
      OrderDirection:
        description: |
          The ordering of the list, Ascending or Descending
        enum:
          - Asc
          - Desc
        type: string
      OrderByField:
        description: |
          It must be an existing field. Declares the base of the ordering
        type: string
  Filter:
    type: object
    properties:
      TagIds:
        description: You can direct your search queries into specific tags. By giving the required tag id list, the filter will affect just the provided tags. It’s useful to create powerful search queries inside given tags. To filter inside a whole dataset, you can set this field to empty
        type: array
        items: 
          type: string
      Query:
        description: |
          Set here the filters. The value is the query string you want to apply. Can be BOOL expressions. You can use these: AND, OR, NOT. For example: 'searchforthis AND NOT butnotthis'. Also you can use wildcards. For example: 'exampl*'. If you want to search in a specified field, than do thie: 'title:searchthisinthetitle'
        type: string
  'PaginatedList[Object]':
    type: object
    properties:
      Items:
        description: >
          Containing the actual displayed items. The type of the elements depend
          on the method
        type: array
        items:
          $ref: '#/definitions/Object'
      Pagination:
        $ref: '#/definitions/Pagination'
      Count:
        description: |
          The count of the actual returned items
        format: int32
        type: integer
      Total:
        description: |
          The count of all items which are the pagination applied
        format: int32
        type: integer
  ErrorsModel:
    type: object
    properties:
      Errors:
        type: array
        items:
          type: string
  DocumentSampleSettings:
    required:
      - Id
      - Pagination
    type: object
    properties:
      Id:
        type: string
        description: >
          It must be a random string for every new sampling, but must be the same
          for the same sampling during pagination. If you leave it empty than
          it'll be generated automatically, but then you can not use pagination
      TagIds:
        description: >
          You can create a sample from a whole dataset, or just from a given tag
          section. To create a sample from the whole dataset please keep it
          empty. To create a sample from a given number of tags please provide
          the tag ids
        type: array
        items:
          type: string
      IsStratified:
        description: >
          You can use stratified sampling. In this case the sampling will be
          created by tags. For general sampling don't use stratified sampling!
        type: boolean
      Pagination:
        $ref: '#/definitions/Pagination'
      Percent:
        description: >
          Defining the sample size, you can use percentage or a given number.
          Using a percentage you can define the document number by a percentage.
          This percentage will calculate the document number by using the
          available dataset document number. E.g.: if your dataset contains
          100.000 documents and you are using 10% as a sampling size without
          stratified method, your sample size is 100.000 x 10% = 10.000
        format: double
        type: number
      Size:
        description: >
          Define your sample size by providing a simple integer. E.g.: if your
          dataset contains 100.000 documents and you are using 3.000 as
          a sampling size without stratified method, your sample size is 3.000
        format: int32
        type: integer
      IdsOnly:
        description: |
          Query returns only with Id field values
        type: boolean
  DocumentCopySettings:
    required:
      - Ids
      - TargetDataSetName
    type: object
    properties:
      Ids:
        type: array
        items:
          type: string
        description: |
          The Id list of the documents you want to copy
      TargetDataSetName:
        type: string
        description: |
          The DataSet name where you want to copy the selected documents
  DocumentMoveSettings:
    required:
      - Ids
      - TargetDataSetName
    type: object
    properties:
      Ids:
        type: array
        items:
          type: string
        description: |
          The Id list of the documents you want to move
      TargetDataSetName:
        type: string
        description: |
          The DataSet name where you want to move the selected documents
  Process:
    type: object
    properties:
      Id:
        type: string
      Start:
        format: date-time
        type: string
        description: |
          The UTC time of the process start
      End:
        format: date-time
        type: string
        description: |
          The UTC time of the process end
      Percent:
        format: double
        type: number
        description: |
          The percent of the whole process. (e.g.: 12.23 means 12.23%)
      Status:
        enum:
          - InProgress
          - Cancelled
          - Finished
          - Error
          - Interrupted
          - Paused,
        description: |
          InProgress - the process is in progress, it's working |
          Cancelled - the process was cancelled by the user | 
          Finished - the process was finished succesffully |
          Error - the process stopped by an error, see the ErrorMessages for detailed information |
          Interrupted - the process was interrupted by an unknown event (e.g.: server restart) - under development |
          Paused - the process was paused  - under development
        type: string
      Type:
        enum:
          - ClassifierPrepare
          - PrcPrepare
          - ClassifierExportDictionaries
          - PrcExportDictionaries
          - TagsExportWords
        type: string
      ErrorMessages:
        type: array
        items:
          type: string
      ResultMessage:
        type: string
  ClassifierService:
    required:
      - Name
      - Type
    type: object
    description: >
      For the common properties detail check the
      [Service](#/definitions/Service)
    properties:
      PrepareSettings:
        $ref: '#/definitions/ClassifierPrepareSettings'
      ActivateSettings:
        $ref: '#/definitions/ClassifierActivateSettings'
      Id:
        type: string
      Name:
        type: string
      Description:
        type: string
      Status:
        enum:
          - New
          - Busy
          - Prepared
          - Active
        type: string
      Type:
        enum:
          - Classifier
          - Prc
        description: |
          It's always Classifier for this type
        type: string
      ProcessIdList:
        type: array
        items:
          type: string
      ActualProcessId:
        type: string
  ClassifierPrepareSettings:
    required:
      - DataSetName
      - NGramList
    type: object
    description: |
      These settings are required for the training (Prepare method)
    properties:
      DataSetName:
        type: string
        description: |
          The DataSet name where the Classifier will be trained from
      TagIdList:
        type: array
        items:
          type: string
        description: |
          The list of the tag Ids which will be trained
      NGramList:
        type: array
        items:
          format: int32
          type: integer
        description: >
          The list of the NGrams which will be trained. The maximum NGram can be
          the DataSet's NGram
  ClassifierActivateSettings:
    type: object
    description: |
      These settings are required for the recommendation (Recommend method)
    properties:
      EmphasizedTagIdList:
        type: array
        items:
          type: string
        description: >
          The list of the tag Ids which will emphasized during the
          recommendation
      TagIdList:
        type: array
        items:
          type: string
        description: >
          The list of the tag Ids which will be activated (the recommendation
          will be contains these only)
      NGramList:
        type: array
        items:
          format: int32
          type: integer
        description: >
          The list of the NGrams will be activated (the recommendation algorithm
          will be use these only)
  ClassifierRecommendationRequest:
    required:
      - Text
    type: object
    properties:
      Text:
        type: string
        description: |
          The text the you want to classify
      Count:
        format: int32
        type: integer
        description: |
          How many results you want to see in the response (default value is 3)
      UseEmphasizing:
        type: boolean
        description: |
          Use emphasizing algorithm during this recommendation
      NeedTagInResult:
        type: boolean
        description: |
          If you want to see all the tag object in the response
  ClassifierRecommendationResult:
    type: object
    properties:
      TagId:
        type: string
        description: |
          The recommended tag id
      Score:
        format: double
        type: number
        description: |
          The score that belongs to the tag id
      Tag:
        $ref: '#/definitions/Tag'
  Tag:
    required:
      - Id
      - Name
    type: object
    properties:
      Id:
        description: |
          The identifier of the tag. It must be unique accross the DataSet
        type: string
      Name:
        description: |
          Name of the tag
        type: string
      ParentId:
        description: >
          The identifier of the parent of the tag. It must be the id of an
          existing tag
        type: string
      Properties:
        $ref: '#/definitions/TagProperties'
        description: |
          These are read only calculated values
  TagProperties:
    description: |
      Some calculated values for the tag
    readOnly: true
    type: object
    properties:
      Path:
        description: |
          A tag array contains parent path elements
        type: array
        items:
          $ref: '#/definitions/PathItem'
      Level:
        description: |
          The level of the tag in the hierarchy (root level is: 0)
        format: int32
        type: integer
      IsLeaf:
        description: >
          If the tag is a leaf tag. Leaf tag means the tag is not a parent of any
          other tags
        type: boolean
      DocumentCount:
        description: |
          Document count for the tag
        format: int32
        type: integer
      WordCount:
        description: |
          Word count for the tag
        format: int32
        type: integer
  PathItem:
    type: object
    description: ''
    properties:
      Id:
        type: string
      Name:
        type: string
      Level:
        format: int32
        type: integer
  ExportDictionariesSettings:
    type: object
    properties:
      TagIdList:
        type: array
        items:
          type: string
      NGramList:
        type: array
        items:
          format: int32
          type: integer
  Service:
    required:
      - Name
      - Type
    type: object
    properties:
      Id:
        type: string
      Name:
        type: string
      Description:
        type: string
      Status:
        enum:
          - New
          - Busy
          - Prepared
          - Active
        type: string
        description: >
          New - the service was created | Busy - the service is working on
          something (e.g.: during the Prepare) | Prepared - the service was
          prepared so you can activate it to use | Active - the service so you
          can use it
      Type:
        enum:
          - Classifier
          - Prc
        type: string
      ProcessIdList:
        type: array
        items:
          type: string
        description: |
          contains all the process ids which belongs to this service
      ActualProcessId:
        type: string
        description: >
          the Id of the process which belongs to this service and is in progress
          right now
  PrcService:
    required:
      - Name
      - Type
    type: object
    properties:
      PrepareSettings:
        $ref: '#/definitions/PrcPrepareSettings'
      ActivateSettings:
        $ref: '#/definitions/PrcActivateSettings'
      Id:
        type: string
      Name:
        type: string
      Description:
        type: string
      Status:
        enum:
          - New
          - Busy
          - Prepared
          - Active
        type: string
      Type:
        enum:
          - Classifier
          - Prc
        type: string
      ProcessIdList:
        type: array
        items:
          type: string
      ActualProcessId:
        type: string
  PrcPrepareSettings:
    required:
      - DataSetName
    type: object
    properties:
      DataSetName:
        type: string
      TagIdList:
        type: array
        items:
          type: string
  PrcActivateSettings:
    type: object
    properties:
      FieldsForRecommendation:
        type: array
        items:
          type: string
  PrcRecommendationRequest:
    required:
      - Text
      - TagId
    type: object
    properties:
      Text:
        type: string
      Count:
        format: int32
        type: integer
      NeedDocumentInResult:
        type: boolean
      TagId:
        type: string
      Filter:
        $ref: '#/definitions/Filter'
      Weights:
        type: array
        items:
          $ref: '#/definitions/Weight'
  Weight:
    type: object
    properties:
      Query:
        type: string
      Value:
        format: double
        type: number
  PrcRecommendationResult:
    type: object
    properties:
      DocumentId:
        type: string
      Score:
        format: double
        type: number
      Document:
        $ref: '#/definitions/Object'
  TagBulkSettings:
    required:
      - Tags
    type: object
    properties:
      Tags:
        type: array
        description: |
          The complete tag hierarchy array
        items:
          $ref: '#/definitions/Tag'
  TagsExportWordsSettings:
    required:
      - NGramList
    type: object
    properties:
      TagIdList:
        type: array
        items:
          type: string
      NGramList:
        type: array
        items:
          format: int32
          type: integer
securityDefinitions: {}
